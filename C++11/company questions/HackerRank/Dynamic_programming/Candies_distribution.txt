#include<iostream>
#include<vector>
#include <utility>
#include<map>
#include<algorithm>
#include <numeric>  
using namespace std;

/*
Logic is
first create to vecotr
left to right 
and right to left with size equal to n

intiaize both vectors with 1


now iterate over left to right and see if right element is greate then left one
then ltr[i] = ltr[i-1]+1
means right element must have one more candie then the left one

likewise not iterate over the right to left one
if left one has the more mark then the right one then left one gets one more candies then the right one

now we have ltr and rtl arrays are ready

take the maximum of the both array idnex

sum them all
*/


long candies(int n, vector<int> arr) {

	vector<int> ltr(n, 1);
	vector<int> rtl(n, 1);
	vector<int> final(n, 0);

	int arrsize = arr.size();
	long res = 0;

	for (int i = 1; i < arrsize; i++)
	{
		if (arr[i] > arr[i - 1])
		{
			ltr[i] = ltr[i - 1] + 1;
		}
		/*else if (arr[i] == arr[i - 1])
		{
			ltr[i] = ltr[i - 1] - 1;
		}*/
	}

	for (int i = arr.size()-2; i >=0; i--)
	{
		if (arr[i] > arr[i +1])
		{
			rtl[i] = rtl[i + 1] + 1;
		}
		/*else if (arr[i] == arr[i + 1])
		{
			rtl[i] = rtl[i + 1] - 1;
		}*/
	}

	for (int i = 0; i < arrsize; i++)
	{
		final[i] = ltr[i] >= rtl[i] ? ltr[i] : rtl[i];
	}

	
	res = accumulate(begin(final), end(final), res);
	return res;
}

int main()
{
	/*vector<int> arr = { 1,2,2 };
	int number = 3;*/

	vector<int> arr = {2,4,2,6,1,7,8,9,2,1};
	int number = 10;
	candies(number,arr);
	return 0;
}